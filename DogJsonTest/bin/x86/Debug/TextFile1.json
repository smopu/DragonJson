{
	"p3": {
		"x": 2,
		"y": 1,
		"z": 33
	},
	"dictionary3": [
		[
			[
				3,
				2,
				1
			],
			{
				"b": false,
				"num": 11111,
				"str": "rradads"
			}
		],
		[
			[
				1,
				4,
				-9.8
			],
			{
				"b": false,
				"num": 888,
				"str": "热热我"
			}
		],
		[
			[
				-3.2E-13,
				3E+13,
				0.99
			],
			{
				"b": false,
				"num": 999999,
				"str": "特别强势人物了"
			}
		]
	]
}


//-代理读取基本json类型需要同一
//- 枚举写入
//- 处理缓存为可变长度

//- arrayWarp 与字段属性 容器统一
//-root 额外处理

//- 字符串匹配优化
//- null处理


//注释
//测试用例
//unity适配


//x 字符串自定义代理
//x 路径多维数组



//-循环引用序列化 可能需要调整顺序，使得路径恒为前缀生成

//-字符串为key的字典额外处理


//-构造函数注册
//-数组的元素真类型于数组元素类型不同
//-数组容器的元素真类型于数组元素类型不同

//-泛型特例容器
//-委托写入



CollectionManager TypeAddrReflectionWrapper 类型 TypeAllCollection {
	enum TypeSerialization
	{
		Wrapper,
		CollectionObject,
		CollectionArray,
		String,
	}
	TypeAddrReflectionWrapper wrapper
	TypeAddrReflectionWrapper wrapper
	rapper IWriterCollectionObject
	IWriterCollectionObject IReadCollectionString
	IReadCollectionString
} CollectionManager.MainType Dictionary<Type,TypeAllCollection> CollectionManager.MainType Dictionary<String,TypeAllCollection> TypeAddrReflectionWrapper {
	TypeAddrFieldAndProperty {
		bool isCollection
		bool isCollectionString
		IWriterCollectionObject IWriterCollectionObject
		IReadCollectionString IReadCollectionString
	}
} IsRef = true ：容器类必须在初始化时创建对象 全部使用统一指针 IsRef = false： 容器类不能在序列化时被重复引用 IsOutTemp = true 容器类弹出一个临时对象
